


((((((((((&&&&&))))))))))



((((((((((&&&&&))))))))))



((((((((((&&&&&))))))))))



((((((((((&&&&&))))))))))



















((((((((((&&&&&))))))))))




















 red = randon.rondint(0,156)
s green = randon.candint(0,256)
 Blue = random. randint(0, 256)
H return red, grsen, blue





















((((((((((&&&&&))))))))))














from sty import fg










 def generateRsB():
s red = randon.rondint(0,256)
s Sree = randon.randint(0,256)
H Blue = random. randint(0, 256)
H return red, grasn, blue





























((((((((((&&&&&))))))))))




# input_tile = "text2.txt"



# output_file = "output2.txt"

def has_specific_words(line, words):
for word in words:
if all(part in line for part in word.split(" & ")):
return True
return False

def is_import_line{line):
return line.startswith("import") or ("from" in line and "import" in line)

def has_word_ending_with_parentheses(Line):
return bool(re.search(r'\St\s*\([*)]*\)', line))

# with open(input_file, "r") as in_file:

#  input_text = in_file.read()

# with open(output_file, "w") as out_file:

lines = text_input.split('\n')

for line in lines:

line = re.sub(r"A\d+", "", Line)

if has_specific_words(line, specific_words):
output_file = line

elif is_import_line(line):
output_file = line

elif has_word_ending_with_parentheses(line):
output_file = line

output_files = f"{output_files}n{output_file}"

output_file =









((((((((((&&&&&))))))))))


























Breen = rondom,ranvint(0,256)










’ blue = randon.randint(0,256)

® return ce, green, blue’



 def ganeratecolour(red, green, blue):
n rotor fg(red, green, blue)





 red, green, blue = generateRca()


























((((((((((&&&&&))))))))))



((((((((((&&&&&))))))))))



((((((((((&&&&&))))))))))
















for c in cts:
X,y,w,h = cv2.boundingRect(c)
x_value.append(x)
x_values.append(x)

x_values.sort()
for c in cts:

X,¥,W,h = cv2.boundingRect(c)
if w > 300 and y > 0 and x > 50:

h = 950-100
y = 50|
w = 1200

roi = image[y:y+h, x:x+w]
cv2.imwrite(file_name2,roi)
cv2.rectangle(base_image, (x,y), (x+w,y+h),(0,255,0),2)

cv2.imwrite("temp/roi.png",base_image)

((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))













((((((((((&&&&&))))))))))













((((((((((&&&&&))))))))))





















((((((((((&&&&&))))))))))




















((((((((((&&&&&))))))))))




















((((((((((&&&&&))))))))))














© @ =






((((((((((&&&&&))))))))))

























((((((((((&&&&&))))))))))




















((((((((((&&&&&))))))))))

























((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))






, allow_redirects=True)



rl(url)




d(final_url)

onse_head.headers.get(' content-length')









 progress_bar_length), end="\r')



((((((((((&&&&&))))))))))



((((((((((&&&&&))))))))))








def multiply():
a=2
b=3

return a*b

((((((((((&&&&&))))))))))











= Sepa UA UU pUC_us Say, 1 hae_y
cv2.imwrite(frame_filename, frame)





frame_number += 1


cap.set(cv2.CAP_PROP_POS_FRAMES, frame_number * frame_rate)


.release()
.destroyAllWindows()


s.path.exists(video_path):

s.remove(video_path)

print(‘video file deleted successfully.')


print('video file does not exist.')


time = time.time()

cution_time = end_time - start_time

nt(f"Execution time for downloading: {execution_time:.2f} seconds")







((((((((((&&&&&))))))))))












return a*b



((((((((((&&&&&))))))))))







return

((((((((((&&&&&))))))))))









return

((((((((((&&&&&))))))))))
















((((((((((&&&&&))))))))))







def multiply():
a=2

b=3

return a*b

((((((((((&&&&&))))))))))

















((((((((((&&&&&))))))))))






def multiply():

((((((((((&&&&&))))))))))








def multiply():

=2 H
=3 function body

return a*b








((((((((((&&&&&))))))))))








def multiply():




Ei ta=2
E b=3 function body



return a*b







((((((((((&&&&&))))))))))








def multiply():




Ei ta=2
E b=3 function body |



return a*b









((((((((((&&&&&))))))))))





def _multiply():











((((((((((&&&&&))))))))))






def  nultiply():

((((((((((&&&&&))))))))))








s, " " * (progress_bar_length - progress), int(downloaded_size / total_size * 100)



me in headless mode (no GUT) —




-_located((By.CSS_SELECTOR, '.download-icon')))

((((((((((&&&&&))))))))))





def multiply():

a=2 a, b were created
b=3 inside the function
return a*b








((((((((((&&&&&))))))))))





def multiply():

a=2 a, b were created
b=3 inside the function
return a*b







((((((((((&&&&&))))))))))






def multiply():
a=2

return a*b

if a>b:
print(a)











((((((((((&&&&&))))))))))









def multiply():

a=2 a, b were created
b=3 inside the function
return a*b

if a>b: they don't exist
print(a) outside the function



((((((((((&&&&&))))))))))













((((((((((&&&&&))))))))))



def multiply():
a=2 ] a,b were created







b=3 inside the function
return a*b

if a>b: they don't exist
print(a) outside the function

NameError: name 'a' is not defined ><

((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))





def multiply():

a=2 a, b were created
b=3 inside the function
return a*b






if a>b: they don't exist
print(a) outside the function

NameError: name 'a' is not defined ><

((((((((((&&&&&))))))))))





def multiply():
a=2 ] a, b were created







b=3 inside the function
return a*b

if a>b: they don't exist
print(a) outside the function

NameError: name 'a' is not defined ><

((((((((((&&&&&))))))))))








def multiply():

a=2 a, b were created
b=3 inside the function
return a*b

if a>b: they don't exist
print(a) outside the function

NameError: name 'a' is not defined ><

((((((((((&&&&&))))))))))





def multiply():
a=2 ] a,b were created







b=3 inside the function
return a*b

if a>b: they don't exist
print(a) outside the function

NameError: name 'a' is not defined ><

((((((((((&&&&&))))))))))









def multiply():
a=2
b=3



((((((((((&&&&&))))))))))








def multiply():
a=2
b=3










((((((((((&&&&&))))))))))








def multiply():
a=2
b=3










((((((((((&&&&&))))))))))









def multiply():
a=2
b=3



((((((((((&&&&&))))))))))







n(image_files), len(image_files) // num_p

n(image_files), len(image_files) // num_p

((((((((((&&&&&))))))))))









def multiply():
a=2
b=3
returnia







((((((((((&&&&&))))))))))



y) if filename.endswith('.png')]





n(image_files), len(image_files) // num_p

n(image_files), len(image_files) // num_p

((((((((((&&&&&))))))))))





y) if filename.endswith('.png')]



((((((((((&&&&&))))))))))









def multiply():
a=2
b=3
return





((((((((((&&&&&))))))))))









def multiply():
a=2
b=3



((((((((((&&&&&))))))))))









def multiply():
a=2
b=3



((((((((((&&&&&))))))))))





y) if filename.endswith('.png')]

((((((((((&&&&&))))))))))








def multiply():
a=2

return statement

((((((((((&&&&&))))))))))









def multiply():
a=2
b=3

ireturnja*b





((((((((((&&&&&))))))))))









end="\r')






s, " " * (progress_bar_length - progress), int(downloaded_size / total_size * 100)

me in headless mode (no GUT)

((((((((((&&&&&))))))))))











end="\r')



((((((((((&&&&&))))))))))













end="\r')



((((((((((&&&&&))))))))))















end="\r')

((((((((((&&&&&))))))))))





def multiply():



((((((((((&&&&&))))))))))









def multiply():
a=2
b=3

ireturnja*b



((((((((((&&&&&))))))))))







def multiply():
a=2






((((((((((&&&&&))))))))))









def multiply():
a=2
b=3






((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))







def multiply():
a=2






((((((((((&&&&&))))))))))







def multiply():
a=2






((((((((((&&&&&))))))))))







def multiply():
a=2






((((((((((&&&&&))))))))))









def multiply():
a=2
b=3

ireturn{[1,2,3]






((((((((((&&&&&))))))))))





def multiply():









((((((((((&&&&&))))))))))

















"()", "if & :", "with & :", "for & :", "while & :", "else & :","break","contineo","return"] gas








_words(line, words):


art in line for part in word.split(" & ")):


ne(line):
startswith("import") or ("from” in line and "import" in line)

ing_with_parentheses(line):
re.search(r'\St\s*\([+)]*\)', line))




= in_file.read()


ut.split('\n')



b(r"~\d+", "", line)




((((((((((&&&&&))))))))))





y) if filename.endswith('.png')]

((((((((((&&&&&))))))))))






def multiply():






((((((((((&&&&&))))))))))








def multiply():
a=2
b=3
print(”Hello”)



® printing automatically returns None





((((((((((&&&&&))))))))))










def multiply():
a=2
b=3
print(”Hello”)



® printing automatically returns None





((((((((((&&&&&))))))))))










def multiply():
a=2
b=3
print(”Hello”)



® printing automatically returns None





((((((((((&&&&&))))))))))










def multiply():
a=2
b=3
print(”Hello”)



® printing automatically returns None





((((((((((&&&&&))))))))))





def multiply():
a=2

b=3

print(”Hello”)









® printing automatically returns None




((((((((((&&&&&))))))))))










def multiply():
a=2
b=3
print(”Hello”)



® printing automatically returns None





((((((((((&&&&&))))))))))





def multiply():
a=2
b=3
print(”Hello”)









® printing automatically returns None





((((((((((&&&&&))))))))))









\ Ng def multiply():
: S a=2 define








((((((((((&&&&&))))))))))



























_time = time.time()

get_redirected_url(url):


response = requests.head(url, allow_redirects=True)
return response.url

download_with_progress(url, save_path):

final_url = get_redirected_url(url)


response_head = requests.head(final_ur1)
content_length_header = response_head.headers.get('content-length')

if content_length_header is None:
print("content-Length header not provided. Unable to determine download progress.")
return



total_size = int(content_length_header)





((((((((((&&&&&))))))))))













def multiply():
a=2 define
b=3 function










return




multiply()



((((((((((&&&&&))))))))))

















"()", "if & :", "with & :", "for & :", "while & :", "else & :","break","contineo","return"] gas








_words(line, words):


art in line for part in word.split(" & ")):


ne(line):
startswith("import") or ("from” in line and "import" in line)

ing_with_parentheses(line):
re.search(r'\St\s*\([+)]*\)', line))




= in_file.read()


ut.split('\n')



b(r"~\d+", "", line)




((((((((((&&&&&))))))))))

















"()", "if & :", "with & :", "for & :", "while & :", "else & :","break","contineo","return"] gas








_words(line, words):


art in line for part in word.split(" & ")):


ne(line):
startswith("import") or ("from” in line and "import" in line)

ing_with_parentheses(line):
re.search(r'\St\s*\([+)]*\)', line))




= in_file.read()


ut.split('\n')



b(r"~\d+", "", line)




((((((((((&&&&&))))))))))





























_time = time.time()

get_redirected_url(url):


response = requests.head(url, allow_redirects=True)
return response.url

download_with_progress(url, save_path):

final_url = get_redirected_url(url)


response_head = requests.head(final_ur1)
content_length_header = response_head.headers.get('content-length')

if content_length_header is None:
print("content-Length header not provided. Unable to determine download progress.")
return



total_size = int(content_length_header)





((((((((((&&&&&))))))))))












b=3 function

return a*b














((((((((((&&&&&))))))))))












def {multiplyi():
a=2 define
b=3 function

return a*b










((((((((((&&&&&))))))))))






m.download(download_path)






















((((((((((&&&&&))))))))))




























((((((((((&&&&&))))))))))































((((((((((&&&&&))))))))))
























((((((((((&&&&&))))))))))














((((((((((&&&&&))))))))))

















((((((((((&&&&&))))))))))

















((((((((((&&&&&))))))))))

















((((((((((&&&&&))))))))))







cap.set(cv2.CAP_PROP_POS_FRAMES, frame_number * frame_rate)


cap.release()
cv2.destroyAllWindows()


# if os.path.exists(video_path):

#  os.remove(video_path)

#  print('Video file deleted successfully.')

# else:

#  print('Video file does not exist.')



end_time = time.time()

execution time = end_time - start_time

print(f"Execution time for downloading: {execution_time:.2f} seconds")











((((((((((&&&&&))))))))))







improver(file_name,file_name2):

import cv2

import math

image = cv2.imread(file_name)

# height, width, _ = image.shape

base_image = image.copy()

gray = cv2.cvtcolor(image, cv2.COLOR_BGR2GRAY)
blur = cv2.GaussianBlur(gray, (7,7),0)











thresh = cv2.threshold(blur, 0, 255,cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]
kernal = cv2.getStructuringElement(cv2.MORPH_RECT,(30,20))

dilate = cv2.dilate(thresh, kernal, iterations=1)

cnts = cv2.findContours(dilate, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)



cnts = cnts[0] if len(cnts) == 2 else cnts[1]

cnts = sorted(cnts, key=lambda x: cv2.boundingRect(x)[0])


x_value=[]
x_values=[]

for c in cnts:
X,y,w,h = cv2.boundingRect(c)
x_value.append(x)
x_values.append(x)

x_values.sort()

for c in cnts:

X,¥,W,h = cv2.boundingRect(c)

if w > 300 and y > 0 and x > 50:
h = 950-100
y = 50
w = 1200
roi = image[y:y+h, xx]
cv2.imwrite(file_name2,roi)





((((((((((&&&&&))))))))))







improver(file_name,file_name2):

import cv2

import math

image = cv2.imread(file_name)

# height, width, _ = image.shape

base_image = image.copy()

gray = cv2.cvtcolor(image, cv2.COLOR_BGR2GRAY)
blur = cv2.GaussianBlur(gray, (7,7),0)











thresh = cv2.threshold(blur, 0, 255,cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]
kernal = cv2.getStructuringElement(cv2.MORPH_RECT,(30,20))

dilate = cv2.dilate(thresh, kernal, iterations=1)

cnts = cv2.findContours(dilate, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)



cnts = cnts[0] if len(cnts) == 2 else cnts[1]

cnts = sorted(cnts, key=lambda x: cv2.boundingRect(x)[0])


x_value=[]
x_values=[]

for c in cnts:
X,y,w,h = cv2.boundingRect(c)
x_value.append(x)
x_values.append(x)

x_values.sort()

for c in cnts:

X,¥,W,h = cv2.boundingRect(c)

if w > 300 and y > 0 and x > 50:
h = 950-100
y = 50|
w = 1200
roi = image[y:y+h, x:x+u]
cv2.imwrite(file_name2,roi)





((((((((((&&&&&))))))))))
















def multiply():
a=2
b=4
print(a*b)





multiply() 8
multiply() 8
multiply() 8

((((((((((&&&&&))))))))))







 preprocessor(img_path, file_name):
import improver as im
import cv2
from matplotlib import pyplot as plt

image_file = img_path
img = cv2.imread(image_file)

inverted_image = cv2.bitwise_not(img)
cv2.imwrite("temp/inverted.png", inverted_image)

def grayscale(image):
return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

gray_image = grayscale(img)

thresh, im bw = cv2.threshold(gray_image, 69, 240, cv2.THRESH_BINARY)

def noise_removal(image):
import numpy as np
kernel = np.ones((1,1), np.uint8)

image = cv2.dilate(image, kernel, iterations=1)

kernel = np.ones((1,1), np.uint8)
image = cv2.erode(image, kernel, iterations=1)







image = cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel)

image = cv2.medianBlur(image, 1)
return (image)

no_noise = noise_removal(im_bw)
inverted_image2 = cv2.bitwise_not(no_noise)
cv2.imwrite(file_name, inverted_image2)



file_name2 = file_name.replace("inverted", "crop"}.replace("temp3","temp2")



((((((((((&&&&&))))))))))











((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))






def multiply(a,b):
print(a*b)

multiply(2,4)




((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))











((((((((((&&&&&))))))))))











((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))










def multiply(a, b) :
print(a*b) (a:












((((((((((&&&&&))))))))))












def multiply(a, b) :
print(a*b) (I:
















((((((((((&&&&&))))))))))








def multiply(a,b):
print(a*b)



multiply(2,4)





((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))












x_value=[]
x_values=[]

for c in cts:
X,y,w,h = cv2.boundingRect(c)
x_value.append(x)
x_values.append(x)

x_values.sort()
for c in cts:

X,¥,W,h = cv2.boundingRect(c)
if w > 300 and y > 0 and x > 50:

h = 950-100
y=sq
w = 1200

roi = image[y:y+h, x:x+w]
cv2.imwrite(file_name2,roi)
cv2.rectangle(base_image, (x,y), (x+w,y+h),(0,255,0),2)

cv2.imwrite("temp/roi.png",base_image)

((((((((((&&&&&))))))))))






import math
image_file = img_path
img = cv2.imread(image_file)

inverted_image = cv2.bitwise_not(img)
cv2.imwrite("temp/inverted.png", inverted_image)

def grayscale(image):
return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

gray_image = grayscale(img)

thresh, im bw = cv2.threshold(gray_image, 69, 240, cv2.THRESH_BINARY)

def noise_removal(image):
import numpy as np
kernel = np.ones((1,1), np.uint8)

image = cv2.dilate(image, kernel, iterations=1)

kernel = np.ones((1,1), np.uint8)
image = cv2.erode(image, kernel, iterations=1)

image = cv2.medianBlur(image, 1)
return (image)



no_noise = noise_removal(im_bw)
inverted_image2 = cv2.bitwise_not(no_noise)
cv2.imwrite(file_name, inverted_image2)







cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel)



file_name2 = file_name.replace("inverted", "crop"}.replace("temp3", "temp2")

image = cv2.imread(file_name)
# height, width, _ = image.shape

base_image = image.copy()

gray = cv2.cvtcolor(image, cv2.COLOR_BGR2GRAY)



((((((((((&&&&&))))))))))








def multiply(a,b):
print(a*b)



multiply(2,4)
multiply(8,2)





((((((((((&&&&&))))))))))








def multiply(a,b):
print(a*b)



multiply(2,4)
multiply(8,2)



((((((((((&&&&&))))))))))




def multiply(a,b):
print(a*b)



multiply(2,4)
multiply(8,2)



((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))










((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))

ax Ai =





((((((((((&&&&&))))))))))












((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))














((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))













((((((((((&&&&&))))))))))












((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))








((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))









def about_me(name, profession, pet):
print("Hi my name is", name)
print("I am a", profession)
print("and I have a", pet)







((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))





def about_me(name, profession, pet):
print("Hi my name is", name)
print("I am a", profession)







print("and I have a", pet) — N










((((((((((&&&&&))))))))))











((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))














((((((((((&&&&&))))))))))













def about_me(name, profession, pet):
print("Hi my name is", name)
print("I am a", profession)

print("and I have a", pet) N









((((((((((&&&&&))))))))))
















def about_me(name, profession, pet):
print("Hi my name is", name)
print("I am a", profession)

print("and I have a", pet) N


about_me("Mariya", "programmer", "cat") © |







((((((((((&&&&&))))))))))







def about_me(name, profession, pet):
print("Hi my name is", name)
print("I am a", profession)
print("and I have a", pet)




about_me("Mariya", "programmer", "cat")'





((((((((((&&&&&))))))))))


















def about_me(name, profession, pet): "
print("Hi my name is", name)
print("I am a", profession)
print("and I have a", pet)

about_me("Mariya", "programmer", "cat")




((((((((((&&&&&))))))))))


















def about_me(name, profession, pet):
print("Hi my name is", name)
print("I am a", profession)
print("and I have a", pet)

about_me("Mariya", "programmer", "cat")




((((((((((&&&&&))))))))))







def about_me(name, profession, pet):
print("Hi my name is", name)
print("I am a", profession)
print("and I have a", pet)




about_me("Mariya", "programmer", "cat")




((((((((((&&&&&))))))))))















def about_me(name, profession, pet):
print("Hi my name is", name)
print("I am a", profession)
print("and I have a", pet)

about_me("Mariya", "programmer", "cat")



((((((((((&&&&&))))))))))









def about_me(name, profession, pet):
print("Hi my name is", name)
print("I am a", profession)
print("and I have a", pet)



about_me("Mariya", "programmer", "cat")




((((((((((&&&&&))))))))))







def about_me(name, profession, pet):
print("Hi my name is", name)
print("I am a", profession)
print("and I have a", pet)

about_me("Mariya", "programmer", "cat")






((((((((((&&&&&))))))))))





def about_me(name, profession, pet):
print("Hi my name is", name)
print("I am a", profession)





print("and I have a", pet) .



about_me("Mariya", "programmer", "cat") A )









((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))






et): = —



((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))



=!







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))


((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))











((((((((((&&&&&))))))))))











((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))









import random = °
from sty import fg PF)

def generateRGB(): .













((((((((((&&&&&))))))))))









import random = °
from sty import fg PF)

def generateRGB():





((((((((((&&&&&))))))))))














import random “
from sty import fg

def generateRGB() {



((((((((((&&&&&))))))))))














import random “
from sty import fg

def generateRGB():



((((((((((&&&&&))))))))))

& appwayscriptcom a x Ro: =



import random



from sty import fg PF)

def generateRGB():



((((((((((&&&&&))))))))))









import random
from sty import fg

def generateRGB() {







((((((((((&&&&&))))))))))





import random



from sty import fg )

def generateRGB():



((((((((((&&&&&))))))))))












import random
from sty import fg

def generateRGB():





((((((((((&&&&&))))))))))







import random
from sty import fg

def generateRGB() {



((((((((((&&&&&))))))))))















import random


from sty import fg )

def generateRGB(): .









((((((((((&&&&&))))))))))














import random


from sty import fg )

def generateRGB() | .









((((((((((&&&&&))))))))))









import random = °
from sty import fg )

def generateRGB():





((((((((((&&&&&))))))))))













import random “
from sty import fg

def generateRGB():



((((((((((&&&&&))))))))))







import random
from sty import fg

def generateRGB():
| red =





((((((((((&&&&&))))))))))














import random
from sty import fg

def generateRGB():
| red = |






((((((((((&&&&&))))))))))







import random
from sty import fg

def generateRGB():

| red = rd






((((((((((&&&&&))))))))))









import random
from sty import fg

def generateRGB():
| red = randon|









((((((((((&&&&&))))))))))







import random
from sty import fg

def generateRGB():
| red = random.





((((((((((&&&&&))))))))))













import random =
from sty import fg

def generateRGB():
| red = random.|



((((((((((&&&&&))))))))))















import random
from sty import fg

def generateRGB(): N

| red = random.randint °






((((((((((&&&&&))))))))))













import random
from sty import fg

def generateRGB(): N
| red = random. randint[() / °









((((((((((&&&&&))))))))))

& appwayscriptcom a x Ro: =







import random = -
from sty import fg PF)


def generateRGB(): .
| red = random.randint[()] 2h °















((((((((((&&&&&))))))))))







import random
from sty import fg

def generateRGB():
| red = random. randint[()





((((((((((&&&&&))))))))))









import random hy e
from sty import fg PF)
def generateRGB(): u
: r = [2
| red = random.randint[(e, 256) SA °







((((((((((&&&&&))))))))))

& appwayscriptcom a x Ro: =












import random =
from sty import fg

def generateRGB():
| red = random.randint[(e, 256)



((((((((((&&&&&))))))))))







import random
from sty import fg

def generateRGB():
red = random.randint[(e, 256)





((((((((((&&&&&))))))))))

& appwayscriptcom a x Ro: =








import random hy -
from sty import fg PF)

def generateRGB(): .


= F\ © |






((((((((((&&&&&))))))))))

& appwayscriptcom a x Ro: =












import random
from sty import fg

def generateRGB(): N
red = random.randint(0,256) ®
| red = random.randint{(0,256)| ' o






((((((((((&&&&&))))))))))







import random
from sty import fg

def generateRGB():
red = random.randint(0,256)
ref = random.randint(0,256)








((((((((((&&&&&))))))))))

& appwayscriptcom a x Ro: =












import random
from sty import fg

def generateRGB(): N
red = random.randint(0,256) ®
grq = random.randint(0,256) ® |






((((((((((&&&&&))))))))))

& appwayscriptcom a x Rd: =
















import random a
from sty import fg

def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)



((((((((((&&&&&))))))))))









import random
from sty import fg

def generateRGB():

red = random.randint(0,256)
green = random.randint(0,256)
 = random.randint(0,256)















((((((((((&&&&&))))))))))









import random
from sty import fg

def generateRGB():

red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randint|(o, 256]











((((((((((&&&&&))))))))))

& appwayscriptcom a x Rd: =
















import random
from sty import fg

def generateRGB(): N
red = random.randint(0,256) ®
green = random.randint(0,256) © |
blue = random. randint|(o, 256) —





((((((((((&&&&&))))))))))

& appwayscriptcom a x Rd: =

















from sty import fg n-

def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randint(0,256)
return |



((((((((((&&&&&))))))))))









from sty import fg

def generateRGB():





red = random.randint(0,256)

green = random.randint(0,256)
blue = random.randint(0,256)

return red, grd

















((((((((((&&&&&))))))))))









from sty import fg

def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randint(0,256)
return red, green, blue]


























((((((((((&&&&&))))))))))















def generateRGB(): -
red = random.randint(0,256) ]
green = random.randint(0,256) N
blue = random.randint(0,256) °
return red, green, blue [5]



((((((((((&&&&&))))))))))









def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randint(0,256)
return red, green, blue

















((((((((((&&&&&))))))))))







def generateRGB(): Hm e

red = random.randint(0,256) hd

green = random.randint(0,256)


blue = random.randint(0,256) .
return red, green, blue NS | o







((((((((((&&&&&))))))))))
















def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randint(0,256)
return red, green, blue






((((((((((&&&&&))))))))))















def generateRGB(): =
red = random.randint(0,256)
green = random.randint(0,256)

blue = random.randint(0,256) N
return red, green, blue °


generateRGB() bowen







((((((((((&&&&&))))))))))









def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randint(0,256)
return red, green, blue “ei

= [generaterGB() - | ]











((((((((((&&&&&))))))))))









def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randint(0,256)
return red, green, blue N


= lgeneraterGB() f— EN










((((((((((&&&&&))))))))))


















def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randint(0,256)



= generateRGB()



((((((((((&&&&&))))))))))

@ appwayscriptcom a x Rd: =















def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)



blue = random.randint(0,256) N
return red, green, blue °o


red, green, blue | generateRGB() rr




((((((((((&&&&&))))))))))

@ appwayscriptcom a x Rd: =






def generateRGB(): Ee e
red = random.randint(0,256) hd
green = random.randint(0,256) =
blue = random.randint(0,256) .
return red, green, blue . “¥ °


red, green, blue = generateRGB[()| UN rr









((((((((((&&&&&))))))))))









def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randint(0,256)
return red, green, blue


red, green, blue = generateRGB[()] 4









((((((((((&&&&&))))))))))


















red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randint(0,256)
return red, green, blue

, Breen, blue = generateRGB()




((((((((((&&&&&))))))))))















red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randint(0,256) |
return red, green, blue

, Breen, blue = generateRGB()




((((((((((&&&&&))))))))))


((((((((((&&&&&))))))))))










((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))











red, green, blue = generateRGB() Ed e
print[(red, green, blue) M

















((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))













((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))


((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))











((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))











((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))





((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))











((((((((((&&&&&))))))))))







((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))













((((((((((&&&&&))))))))))






return red, green, blue

r def generateColour(red, green, blue):
return fg(red, green, blue)

red, green, blue = generateRGB()

print(red, green, blue)







((((((((((&&&&&))))))))))











def generateColour(red, green, blue):
return fg(red, green, blue)

red, green, blue = generateRGB() ,
colour = generateColour(red, green, blue) =

print(red, green, blue)





((((((((((&&&&&))))))))))










det generateColour(red, green, blue): fm -
return fg(red, green, blue) I
red, green, blue = generateRGB() hn"
colour = generateColour(red, green, blue). I :






((((((((((&&&&&))))))))))









det generateColour(red, green, blue): Bm -
return fg(red, green, blue)
red, green, blue = generateRGB() LJ
colour = generateColour(red, green, blue) :









((((((((((&&&&&))))))))))






det generateColour(red, green, blue):
return fg(red, green, blue)

red, green, blue = generateRGB()
colour = generateColour(red, green, blue)

print()]







((((((((((&&&&&))))))))))









det generateColour(red, green, blue): fm .
return fg(red, green, blue)
red, green, blue = generateRGB() LJ
colour = generateColour(red, green, blue :







((((((((((&&&&&))))))))))






det generateColour(red, green, blue):
return fg(red, green, blue)

red, green, blue = generateRGB()
colour = generateColour(red, green, blue) —==’







((((((((((&&&&&))))))))))


















det generateColour(red, green, blue): fm -

return fg(red, green, blue)
red, green, blue = generateRGB() LJ
colour = generateColour(red, green, blue) :










((((((((((&&&&&))))))))))










det generateColour(red, green, blue): Bx -

return fg(red, green, blue)

red, green, blue = generateRGB() LJ

colour = generateColour(red, green, blue)ez SW :










((((((((((&&&&&))))))))))










det generateColour(red, green, blue): Bx -

return fg(red, green, blue)

red, green, blue = generateRGB() LJ

colour = generateColour(red, green, blue :










((((((((((&&&&&))))))))))






det generateColour(red, green, blue):
return fg(red, green, blue)

red, green, blue = generateRGB()
colour = generateColour(red, green, blue












((((((((((&&&&&))))))))))











det generateColour(red, green, blue): Br -
return fg(red, green, blue)
red, green, blue = generateRGB() LJ
colour = generateColour(red, green, blue :






((((((((((&&&&&))))))))))








lerateColour(red, green, blue):
urn fg(red, green, blue)

‘een, blue = generateRGB()
= generateColour(red, green, blue)











((((((((((&&&&&))))))))))






‘ateColour(red, green, blue):
'n fg(red, green, blue)

'n, blue = generateRGB()
generateColour(red, green, blue)





((((((((((&&&&&))))))))))






‘ateColour(red, green, blue):
'n fg(red, green, blue)

mn, blue = generateRGB()
generateColour(red, green, blue)







((((((((((&&&&&))))))))))






‘ateColour(red, green, blue):
'n fg(red, green, blue)

mn, blue = generateRGB()
generateColour(red, green, blue)







((((((((((&&&&&))))))))))













((((((((((&&&&&))))))))))









((((((((((&&&&&))))))))))
























((((((((((&&&&&))))))))))











((((((((((&&&&&))))))))))























= = —ions






((((((((((&&&&&))))))))))






















((((((((((&&&&&))))))))))















= — - sae . ro -










((((((((((&&&&&))))))))))

























((((((((((&&&&&))))))))))

















andomly changing colours muahahahj =


((((((((((&&&&&))))))))))














[=]






((((((((((&&&&&))))))))))
























((((((((((&&&&&))))))))))



















[=]








((((((((((&&&&&))))))))))















[=]








((((((((((&&&&&))))))))))























((((((((((&&&&&))))))))))


















[=]








((((((((((&&&&&))))))))))























((((((((((&&&&&))))))))))























((((((((((&&&&&))))))))))



























((((((((((&&&&&))))))))))







import random
from sty import fg

def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randin
return red, green, blue





def generateColour(red, green, blue):
return fg(red, green, blue)

red, green, blue = generateRGB()
colour = generateColour(red, green, blue)





((((((((((&&&&&))))))))))





import random
from sty import fg

def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randin
return red, green, blue









def generateColour(red, green, blue): {
return fg(red, green, blue)

red, green, blue = generateRGB()
colour = generateColour(red, green, blue)





((((((((((&&&&&))))))))))





import random
from sty import fg

def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randin
return red, green, blue









def generateColour(red, green, blue):
return fg(red, green, blue)

red, green, blue = generateRGB()
colour = generateColour{red, green, bl,





((((((((((&&&&&))))))))))





import random
from sty import fg

def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randin
return red, green, blue



def generateColour(red, green, blue):
return fg(red, green, blue)



red, green, blue = generateRGB()
colour = generateColour(red, green, blue)









((((((((((&&&&&))))))))))





import random
from sty import fg

def generateRGB():
red = random.randint(0,256)
green = random.randint(0,256)
blue = random.randin
return red, green, blue





def generateColour(red, green, blue):
return fg(red, green, blue)

red, green, blue = generateRGB()
colour = generateColour(red, green, blue)





((((((((((&&&&&))))))))))



((((((((((&&&&&))))))))))



((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))








((((((((((&&&&&))))))))))








((((((((((&&&&&))))))))))


















((((((((((&&&&&))))))))))


















((((((((((&&&&&))))))))))


















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))


















((((((((((&&&&&))))))))))


















((((((((((&&&&&))))))))))




























((((((((((&&&&&))))))))))
















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))





* beautiful icons are by: flaticon.com, freepik.com

((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))


















* beautiful icons are by: flaticon.com, freepik.com

((((((((((&&&&&))))))))))
























* beautiful icons are by: flaticon.com, freepik.com



((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))
























* beautiful icons are by: flaticon.com, freepik.com



((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))















((((((((((&&&&&))))))))))
